---

- name: Configure ferm status in debconf
  debconf:
    name: 'ferm'
    question: 'ferm/enable'
    vtype: 'boolean'
    value: '{{ "true" if ferm_enabled|bool else "false" }}'
  when: ansible_pkg_mgr == 'apt'

- name: Install ferm
  package:
    name: ferm
  environment:
    DEBIAN_FRONTEND: noninteractive

- name: Enable ferm on boot
  service:
    name: ferm
    enabled: yes
  when: ferm_enabled
    
- name: Disable other iptable frontends
  service:
    name: "{{ item }}"
    state: stopped
    enabled: no
  with_items: "{{ ferm_disable_firewalls }}"
  ignore_errors: True

- name: Display rules var
  debug:
    var: ferm_rules
    verbosity: 1

- name: Create config directories
  file:
    path: /etc/ferm/ferm.d
    state: directory
    owner: root
    group: root

- name: Configure ferm.conf
  template:
    src: ferm.conf.j2
    dest: /etc/ferm/ferm.conf
    mode: 0655
    owner: root
    group: root
    backup: yes
  notify:
    - reload ferm

- name: Register ferm.d contents
  shell: ls -A1 /etc/ferm/ferm.d/
  register: fermd_contents
  changed_when: False

- debug:
    var: fermd_contents
    verbosity: 1

- debug:
    var: ferm_rule_files
    verbosity: 1

- name: Clean up unmanaged files from ferm.d
  file:
    path: "/etc/ferm/ferm.d/{{ item }}"
    state: absent
  with_items: "{{ fermd_contents.stdout_lines }}"
  when: item not in ferm_rules

- name: Create the default ferm conf files
  template:
    src: rules.conf.j2
    dest: "/etc/ferm/ferm.d/{{item.key}}"
    mode: 0655
    owner: root
    group: root
    backup: no
  with_dict: "{{ ferm_rules }}"
  loop_control:
    label: "{{ item.key }}"
  notify:
    - reload ferm

- name: Create extra ferm conf files
  template:
    src: rules.conf.j2
    dest: "/etc/ferm/ferm.d/{{item.key}}"
    mode: 0655
    owner: root
    group: root
    backup: no
  with_dict: "{{ ferm_rules_extra | default({}) }}"
  loop_control:
    label: "{{ item.key }}"
  notify:
    - reload ferm
  when: ferm_rules_extra is defined

