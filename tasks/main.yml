---
- name: Combine group rules
  set_fact:
    _ferm_rules_groups: "{{ _ferm_rules_groups | default({}) | combine( lookup('vars', item), recursive=True, list_merge='replace') }}"
  loop: "{{ q('varnames', '^ferm_rules_group_') }}"
  when: >
    ferm_combine_rules | bool
    and item not in ferm_combine_rules_excludes

- name: Combine rules with group rules
  set_fact:
    ferm_rules: "{{ _ferm_rules_groups | default({}) | combine(ferm_rules, recursive=True, list_merge='replace') }}"
  when: ferm_combine_rules | bool

- name: Display rules var
  debug:
    var: "{{ item }}"
    verbosity: 1
  loop:
    - ferm_rules

- include_tasks: install_debian.yaml
  when: >-
    ansible_os_family == "Debian"

- include_tasks: install_redhat.yaml
  when: >-
    ansible_os_family == "RedHat"

- name: Enable ferm on boot
  service:
    name: ferm
    enabled: yes
  when: ferm_enabled

- name: Disable other iptables frontends
  service:
    name: "{{ item }}"
    state: stopped
    enabled: no
  with_items: "{{ ferm_disable_firewalls }}"
  ignore_errors: True

- name: Create config directories
  file:
    path: "{{ ferm_conf_dir }}/ferm.d"
    state: directory
    owner: root
    group: root

- name: Configure ferm.conf
  template:
    src: ferm.conf.j2
    dest: "{{ ferm_conf_dir }}/ferm.conf"
    mode: 0655
    owner: root
    group: root
    backup: no
  notify:
    - reload ferm

- name: Register ferm.d contents
  shell: ls -A1 "{{ ferm_conf_dir }}/ferm.d/"
  register: fermd_contents
  changed_when: False

- debug:
    var: fermd_contents
    verbosity: 1

- debug:
    var: ferm_rule_files
    verbosity: 1

- name: Clean up unmanaged files from ferm.d
  file:
    path: "{{ ferm_conf_dir }}/ferm.d/{{ item }}"
    state: absent
  with_items: "{{ fermd_contents.stdout_lines }}"
  when: item not in ferm_rules

- name: Create ferm conf files
  template:
    src: rules.conf.j2
    dest: "{{ ferm_conf_dir }}/ferm.d/{{item.key}}"
    mode: 0655
    owner: root
    group: root
    backup: no
  with_dict: "{{ ferm_rules }}"
  loop_control:
    label: "{{ item.key }}"
  notify:
    - reload ferm

- name: Create extra ferm conf files
  template:
    src: rules.conf.j2
    dest: "{{ ferm_conf_dir }}/ferm.d/{{item.key}}"
    mode: 0655
    owner: root
    group: root
    backup: no
  with_dict: "{{ ferm_rules_extra | default({}) }}"
  loop_control:
    label: "{{ item.key }}"
  notify:
    - reload ferm
  when: ferm_rules_extra is defined

